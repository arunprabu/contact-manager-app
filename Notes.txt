launch nodejs cmd prompt 
npm install @angular/cli -g
ng new my-app 
cd my-app
ng s -o
ng g c shared/header 
ng g c shared/footer -it -is 
ng g c shared/nav -is 
ng g c shared/header/search -is -it --flat --spec=false 
ng g c contacts -is 
ng g c contacts/add-contact -is 
ng g c contacts/contact-detail -is

Header, footer, nav Template page is here 
https://jsbin.com/gitufizacu/edit?html,js 

Install augury chrome extension 
https://chrome.google.com/webstore/detail/augury/elgalmkoelokbchhkhacckoklkejnhcd


A Note on Project Structure  ( Initial stage )
========
src/
  app/
    components/
      shared/
        header/
        footer/
        nav/
      contacts/
        add-contact/
        contact-details/
        ...
        ...

      auth/
        login/
        signup/
        r-password/
      dashboard/
      reports/
      concepts/
        databinding/
        directives/
    directives/
    services/
    pipes/
    guards/
    utils/
    models/

Data binding 
============
1. String Interpolation  - {{ }} 
2. Property Binding - []  
3. Event Binding - ( ) 
4. Two way Binding - [(ngModel)]     
5. Custom Property Binding   - []   
6. Custom Event Binding  - () 

Expression - { } 

 TS => HTML  ( SI, PB, EB )
 TS <=> HTML (TWB) 

Cross Component Interaction
---------
 Custom Prop Binding
  Parent => Child ( DataBindingComp => CPBComp )
 
 Custom Event Binding ( prereq: custom event in js, jquery )
  Child => Parent ( Nav => Header )

 Parent to Child 
  ViewChild, ViewChildren

Services  (later)
 Common service 
 
Directives 
============
  Some instruction to manupulate the Document Object Model (DOM ) of the Component just like it happens thru jquery plugin 
  jQuery plugin to be usable in ng app => directives 

  1) Attribute Directives 
      <div [ngClass]="">
      <div [ngStyle]="">
  2) Structural Directives
      *ngIf
      *ngFor  (to understand let keyword: https://leanpub.com/understandinges6/read )
      ngSwitch
  3) Custom Attribute Directives 
      ng g d directives/colorizr 
      TODO: refer directives/colorizr.directive.ts

Routing  ( Single Page Application ) 
===========
Step 1: Add the links and set up paths in nav.component.html
<ul class="nav navbar-nav">
    <li class="active"><a href="/">Home</a></li>
    <li><a href="/directives">Directives</a></li>
    <li><a href="/contacts">Contacts</a></li>
</ul>

Step 2: Let's have the routes configured in app-routing.module.ts
const APP_ROUTES: Routes = [
  //syntax : path should have string and the component when that path is hit
  { path: '', component: DataBindingComp },
  { path: 'directives', component: DirectiveComponent },
]

Step 3: 
Add <router-outlet></router-outlet> in layout file (app.component.html)

Step 4: Check the app. The routes should work. But the page will reload. Let's fix it.
Instead of using <a href> use <a routerLink> in nav.component.html. Now check the app. clicking on links should not reload the page.
 
Step 5: let's have active class. have routerLinkActive in li.
<li class="nav-item" routerLinkActive="active"> 
in all the li's.

Step 6: Now, when you see the navigation menu, active class will be added in another link also. 
Let's fix it.
    <li routerLinkActive="active" [routerLinkActiveOptions]="{exact: true}"><a routerLink="/">Home</a></li>

Step 7: TODO: Change the title for each link.
Step 8: TODO: Child / nested routing 
  Refer: https://github.com/arunprabu/ng4-july18/blob/master/Router%20Instructions%20-%20More%20-%20Child%20Routes.txt
  https://github.com/arunprabu/ng4-july18

Forms
=======
1) Template Driven forms 
    HTML template form 
    Adv: 
      1) easy 
      2) you will know whats happening 
    Disadvantages: 
      1) you wont have more control validation 
      2) not well suited if you deal with complex forms 

2) Data driven 
  Reactive forms 
    created by TS 
    using angular dom api's 
      Adv: 
        1) you will have more control over a form element incl,. validation 
      Disadvantages: 
        1) larger learning curve 


Forms in Angular Application
=============
  1) optimize the template form for ng 
  2) some kind of validations 
  Refer: https://codecraft.tv/courses/angular/forms/template-driven/
